name: Main Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    # TODO: Remove pull_request trigger after CI issues are resolved

jobs:
  quality-and-tests:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set mock environment for tests
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=https://mock.supabase.co" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV
          echo "SUPABASE_URL=https://mock.supabase.co" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Lint check
        run: npm run lint

      - name: Run Phase 1 tests
        run: npm run test:phase1

      - name: Run UI component tests
        run: npm run test:phase1:ui

  build-containers:
    name: Build & Test Containers
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-and-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build development container
        env:
          # Mock environment variables for container builds (100+ char requirement)
          NEXT_PUBLIC_SUPABASE_URL: https://mock.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
          SUPABASE_SERVICE_ROLE_KEY: mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
          SUPABASE_URL: https://mock.supabase.co  
          SUPABASE_ANON_KEY: mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
        run: docker build --target development -t smart-dashboard:dev .

      - name: Test development container
        run: |
          docker run -d --name test-dev -p 3001:3000 \
            -e NEXT_PUBLIC_SUPABASE_URL=https://mock.supabase.co \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions \
            -e SUPABASE_SERVICE_ROLE_KEY=mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions \
            smart-dashboard:dev
          
          # Wait for container to be ready with health check
          echo "Waiting for development container to be ready..."
          for i in {1..60}; do
            if docker logs test-dev 2>&1 | grep -q "Ready in\|localhost:3000\|server started on"; then
              echo "Container logs show server is starting..."
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Container failed to show ready state in logs"
              docker logs test-dev
              exit 1
            fi
            sleep 2
          done
          
          # Test container connectivity using multiple approaches
          echo "Testing container connectivity..."
          for i in {1..15}; do
            # Try localhost first, then 127.0.0.1, then docker exec
            if curl -f --connect-timeout 5 --max-time 10 http://localhost:3001/ > /dev/null 2>&1; then
              echo "✅ Development container responding on localhost!"
              break
            elif curl -f --connect-timeout 5 --max-time 10 http://127.0.0.1:3001/ > /dev/null 2>&1; then
              echo "✅ Development container responding on 127.0.0.1!"
              break
            elif docker exec test-dev curl -f --connect-timeout 5 --max-time 10 http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Development container responding internally!"
              break
            else
              if [ $i -eq 15 ]; then
                echo "❌ Container failed to respond after 30 seconds"
                echo "=== Container Logs ==="
                docker logs test-dev
                echo "=== Container Status ==="
                docker ps -a --filter name=test-dev
                echo "=== Port Check ==="
                netstat -tlnp | grep :3001 || echo "Port 3001 not listening"
                exit 1
              fi
              echo "Attempt $i/15: Container not ready, waiting 2s..."
              sleep 2
            fi
          done
          
          docker stop test-dev
          docker rm test-dev

      - name: Build production container  
        env:
          # Mock environment variables for container builds (100+ char requirement)
          NEXT_PUBLIC_SUPABASE_URL: https://mock.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
          SUPABASE_SERVICE_ROLE_KEY: mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
          SUPABASE_URL: https://mock.supabase.co
          SUPABASE_ANON_KEY: mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions
        run: npm run docker:prod:build

      - name: Test production container
        run: |
          docker run -d --name test-prod -p 3002:3000 \
            -e NEXT_PUBLIC_SUPABASE_URL=https://mock.supabase.co \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions \
            -e SUPABASE_SERVICE_ROLE_KEY=mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions \
            smart-dashboard:latest
          
          # Wait for container to be ready with health check
          echo "Waiting for production container to be ready..."
          for i in {1..45}; do
            if docker logs test-prod 2>&1 | grep -q "Ready in\|localhost:3000\|server started on\|▲ Next.js"; then
              echo "Container logs show server is starting..."
              break
            fi
            if [ $i -eq 45 ]; then
              echo "Container failed to show ready state in logs"
              docker logs test-prod
              exit 1
            fi
            sleep 2
          done
          
          # Test container connectivity using multiple approaches
          echo "Testing container connectivity..."
          for i in {1..15}; do
            # Try localhost first, then 127.0.0.1, then docker exec
            if curl -f --connect-timeout 5 --max-time 10 http://localhost:3002/ > /dev/null 2>&1; then
              echo "✅ Production container responding on localhost!"
              break
            elif curl -f --connect-timeout 5 --max-time 10 http://127.0.0.1:3002/ > /dev/null 2>&1; then
              echo "✅ Production container responding on 127.0.0.1!"
              break
            elif docker exec test-prod curl -f --connect-timeout 5 --max-time 10 http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Production container responding internally!"
              break
            else
              if [ $i -eq 15 ]; then
                echo "❌ Container failed to respond after 30 seconds"
                echo "=== Container Logs ==="
                docker logs test-prod
                echo "=== Container Status ==="
                docker ps -a --filter name=test-prod
                echo "=== Port Check ==="
                netstat -tlnp | grep :3002 || echo "Port 3002 not listening"
                exit 1
              fi
              echo "Attempt $i/15: Container not ready, waiting 2s..."
              sleep 2
            fi
          done
          
          docker stop test-prod
          docker rm test-prod

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-containers

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set mock environment for E2E tests
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=https://mock.supabase.co" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=mock-service-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV
          echo "SUPABASE_URL=https://mock.supabase.co" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=mock-anon-key-for-build-that-is-over-one-hundred-characters-long-to-satisfy-validation-requirements-in-github-actions" >> $GITHUB_ENV

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7